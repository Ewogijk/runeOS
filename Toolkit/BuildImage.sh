#!/bin/bash

#
#  Copyright 2025 Ewogijk
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

EFI_SYSTEM_PARTITION_GUID="EF00"  # sgdisk alias for the EFI System Partition GUID
LOOP_DEVICE="/dev/loop7"          # Loop device used to mount the image
TMP_KERNEL_DIR="TmpKernelMnt"     # Temporary mount directory for the kernel partition
TMP_DATA_DIR="TmpDataMnt"         # Temporary mount directory for the data partition

MIN_FAT32_IMAGE_SIZE=64   #MB, Minimum FAT32 volume size
MIN_IMAGE_SIZE=128        #MB, Minimum image size -> Data partition size >64MB

arg_count=10
if [ $# -ne $arg_count ]; then
    echo "ERROR: Insufficient number of arguments, Expected: ${arg_count}, Got: $#"
    exit 1
fi

out_file=$1                       # Output image file
kernel_elf=$2                     # Compiled Kernel sources
os_elf=$3                         # Compiled OS sources
image_size=$4                     # Requested image size in MB
os_install_dir=$5                 # OS install directory on the data partition
rune_partition_type_guid=$6       # Identifies a partition as being generated by the rune kernel or this bundler
kernel_partition_unique_guid=$7   # Unique partition GUID of the Kernel/EFI System Partition partition
os_partition_unique_guid=$8       # Unique partition GUID of the OS partition
app_list=$9
app_dir=${10}

if [ $image_size -lt $MIN_IMAGE_SIZE ]; then
    echo "ERROR: Minimum image size is ${MIN_IMAGE_SIZE}MB, Requested: ${image_size}MB"
    exit 1
fi

echo
echo BuildImage Configuration:
echo -------------------------
echo
echo "Image File: $out_file"
echo "Kernel ELF: $kernel_elf"
echo "OS ELF: $os_elf"
echo "Image Size: ${image_size}MB"
echo "OS Install directory: $os_install_dir"
echo "Rune Partition Type GUID: $rune_partition_type_guid"
echo "Kernel Partition Unique GUID: $kernel_partition_unique_guid"
echo "OS Partition Unique GUID: $os_partition_unique_guid"
echo "App List: $app_list"
echo "App Installation Directory: $app_dir"
echo


# We will request mount directory ownership for the calling user
# -> Ensures that we have permissions to copy files over
uid=$(id -u)    # ID of the current user
gid=$(id -g)    # Group of the current user

set -x  # Print all shell commands
# Create disk image
touch $out_file
dd if=/dev/zero of=$out_file count=$image_size bs=1M

# Create kernel partition
sgdisk $out_file \
        -n 0:0:${MIN_FAT32_IMAGE_SIZE}MiB \
        -t 0:$EFI_SYSTEM_PARTITION_GUID \
        -u 0:$kernel_partition_unique_guid \
        -A 0:set:0 \
        -c 0:Kernel

# Create data partition
sgdisk $out_file \
        -n 0:0:0 \
        -t 0:$os_partition_unique_guid \
        -u 0:5e3f0533-902a-4642-b125-728c910c1f79 \
        -A 0:set:0 \
        -c 0:Data

# Setup loop device
sudo losetup -P $LOOP_DEVICE $out_file
sleep .1
# FAT32 format kernel and data partition
sudo mkfs.fat -F 32 ${LOOP_DEVICE}p1
sudo mkfs.fat -F 32 ${LOOP_DEVICE}p2

# Mount kernel partition
mkdir -p $TMP_KERNEL_DIR
sudo mount -o uid=${uid},gid=${gid} ${LOOP_DEVICE}p1 $TMP_KERNEL_DIR

# Mount data partition
mkdir -p $TMP_DATA_DIR
sudo mount -o uid=${uid},gid=${gid} ${LOOP_DEVICE}p2 $TMP_DATA_DIR


# Copy kernel elf and limine files to kernel partition
mkdir -p ${TMP_KERNEL_DIR}/EFI/BOOT
cp $kernel_elf $TMP_KERNEL_DIR
cp Ressource/BOOTX64.EFI ${TMP_KERNEL_DIR}/EFI/BOOT
cp Ressource/limine.conf $TMP_KERNEL_DIR

# Install OS.app
mkdir -p ${TMP_DATA_DIR}/$os_install_dir
cp $os_elf ${TMP_DATA_DIR}/$os_install_dir

# Split the app list with ',' separator: one,two -> [one, two]
apps=$(echo $app_list | tr "," "\n")
mkdir -p ${TMP_DATA_DIR}/$app_dir
for a in $apps
do
    cp $a ${TMP_DATA_DIR}/$app_dir
done

# Clean up
sudo umount $TMP_KERNEL_DIR
sudo umount $TMP_DATA_DIR
sudo losetup -d $LOOP_DEVICE
rm -r $TMP_KERNEL_DIR
rm -r $TMP_DATA_DIR