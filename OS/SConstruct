#   Copyright 2025 Ewogijk
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import json
from pathlib import Path

from SCons.Environment import *
from SCons.Variables import *

######################################################################################################
#                                       Compiler Config                                              #
######################################################################################################

# Define command line arguments
cli_vars = Variables(None, ARGUMENTS)
cli_vars.Add(
    EnumVariable(
        'build',
        'The build type determines if compiler optimizations are used, release builds are optimized.',
        'debug',
        allowed_values=['dev', 'release']
    )
)
cli_vars.Add(
    (
        'compiler',
        'The absolute path to the cross compiler.',
        ''
    )
)
cli_vars.Add(
    (
        'os_elf_name',
        'Name of the generated OS elf.',
        'runeOS.app'
    )
)
cli_vars.Add(
    (
        'os_version',
        'The version of this os build.',
        '0.0.0-dummy'
    )
)

target_env = Environment(
    variables=cli_vars,
    AS='nasm'
)
Help(cli_vars.GenerateHelpText(target_env))
build = target_env['build']

compiler = Path(target_env['compiler'])
target_env['CXX'] = str(compiler / 'bin' / 'x86_64-elf-g++')
target_env['CPPPATH'] = str(compiler / 'bin' / 'x86_64-elf-g++')

# Include directories
target_env['CPPPATH'] = [
    str(Path.cwd() / 'Include'),
    str(Path.cwd() / '..' / 'Hammer' / 'Include'),
    str(Path.cwd() / '..' / 'Pickaxe' / 'Include'),
]

# Compiler flags
target_env['CXXFLAGS'] = [
    '-Wall',
    '-Wextra',
    '-ffreestanding',
    '-fno-exceptions',
    '-fno-rtti',
    '-fstack-protector-all',
    '-m64',
    '-mcmodel=kernel',
    '-mno-mmx',
    '-mno-red-zone',
    '-fno-use-cxa-atexit',  # Do not call destructors for global objects
    '-g',
]

# Linker flags
target_env['LINKFLAGS'] = [
    '-ffreestanding',
    '-lgcc',
    '-nostdlib',
    '-static',
    '-pie',
    '-z', 'text',
    '-z', 'max-page-size=0x1000',
    '-g',
]

# Nasm flags
target_env['ASFLAGS'] = [
    '-Wall',
    '-f', 'elf64'
]

if build == 'release':
    # enable optimizations
    cxxflags.append('-O2')
    ldflags.append('-O2')

# Change scons messages for better readability
target_env.Replace(
    ASCOMSTR='Assembling [$SOURCE]',
    CXXCOMSTR='Compiling [$SOURCE]',
    ARCOMSTR='Creating static library [$TARGET]',
    RANLIBCOMSTR='Updating static library [$TARGET]',
    LINKCOMSTR='Linking [$TARGET]',
    INSTALLSTR='Installing [$TARGET]'
)
Export('target_env')


######################################################################################################
#                                           Code Generation                                          #
######################################################################################################


def create_macro_def_json(out_file: str):
    parts = target_env['os_version'].split('-')
    os_prerelease = parts[1] if len(parts) > 1 else ''
    parts = parts[0].split('.')
    os_major = parts[0] if len(parts) > 0 else 0
    os_minor = parts[1] if len(parts) > 1 else 0
    os_patch = parts[2] if len(parts) > 2 else 0
    macro_defs = [
        ['The OS major version', f'OS_MAJOR {os_major}'],
        ['The OS minor version', f'OS_MINOR {os_minor}'],
        ['The OS patch version', f'OS_PATCH {os_patch}'],
        ['The OS prerelease version', f'OS_PRERELEASE "{os_prerelease}"'],
    ]
    with open(out_file, 'w') as f:
        json.dump(macro_defs, f, indent=4)


# Only run code generation if the kernel should be build
if not GetOption('clean'):
    # Provide the python scripts as source so the code gen is always triggered when the scripts are updated
    #                           OR
    # Obviously the generated source file is missing
    # Dunno how to make this only run when cli args change -> just run it everytime
    create_macro_def_json('BuildTools/MacroDefs.json')
    target_env.Command(
        'Include/Build.h',
        ['BuildTools/GenerateBuildHeader.py', 'BuildTools/MacroDefs.json'],
        'python3 $SOURCE $TARGET BuildTools/MacroDefs.json'
    )

######################################################################################################
#                                           OS Build                                                 #
######################################################################################################


build_dir = Path('Build')

# Build the runeOS std lib
target_env.SConscript(
    str(Path('..') / 'Hammer' / 'Src' / 'SConscript'),
    variant_dir=str(build_dir / 'Hammer'),
    duplicate=0
)
Import('Hammer')

# Build system call library
target_env.SConscript(
    str(Path('..') / 'Pickaxe' / 'Src' / 'SConscript'),
    variant_dir=str(build_dir / 'Pickaxe'),
    duplicate=0
)
Import('Pickaxe')

# Build the basic userspace runtime
target_env.SConscript(
    str(Path('..') / 'Forge' / 'Src' / 'SConscript'),
    variant_dir=str(build_dir / 'Forge'),
    duplicate=0
)
Import('Forge')
Import('linker_script')
Import('crti')
Import('crtn')

app_name = 'runeOS'
target_env.SConscript(
    str(Path('Src') / 'SConscript'),
    variant_dir=str(build_dir / app_name),
    duplicate=0
)
Import(app_name)

objects = [
    crti,
    compiler / 'lib' / 'gcc' / 'x86_64-elf' / '13.2.0' / 'crtbegin.o',
    Forge,
    runeOS,
    Pickaxe,
    Hammer,
    compiler / 'lib' / 'gcc' / 'x86_64-elf' / '13.2.0' / 'crtend.o',
    crtn
]

target_env.Append(
    LINKFLAGS=['-T', linker_script]
)

target_env.Program(build_dir / target_env['os_elf_name'], objects)
