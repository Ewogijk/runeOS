#   Copyright 2025 Ewogijk
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

from pathlib import Path

from SCons.Environment import *
from SCons.Variables import *

######################################################################################################
#                                       SConstruct Template                                          #
# This template handles building and linking an application against the mini std lib, Pickaxe        #
# and userspace runtime env                                                                          #
# Just fill in the TODOs and done                                                                    #
######################################################################################################

######################################################################################################
#                                       Compiler Config                                              #
######################################################################################################

# Define command line arguments
cli_vars = Variables(None, ARGUMENTS)
cli_vars.Add(
    EnumVariable(
        'build',
        'The build type determines if compiler optimizations are used, release builds are optimized.',
        'dev',
        allowed_values=['dev', 'release']
    )
)
cli_vars.Add(
    (
        'compiler',
        'The absolute path to the cross compiler.',
        ''
    )
)

target_env = Environment(
    variables=cli_vars,
    AS='nasm',
)
Help(cli_vars.GenerateHelpText(target_env))
build = target_env['build']

compiler = Path(target_env['compiler'])
target_env['CXX'] = str(compiler / 'bin' / 'x86_64-elf-g++')
target_env['CPPPATH'] = str(compiler / 'bin' / 'x86_64-elf-g++')

# Include directories
target_env['CPPPATH'] = [
    str(Path.cwd() / '..' / '..' / 'Hammer' / 'Include'),
    str(Path.cwd() / '..' / '..' / 'Pickaxe' / 'Include'),
]

# Compiler flags
target_env['CXXFLAGS'] = [
    '-Wall',
    '-Wextra',
    '-ffreestanding',
    '-fno-exceptions',
    '-fno-rtti',
    '-fstack-protector-all',
    '-m64',
    '-mcmodel=kernel',
    '-mno-mmx',
    '-mno-red-zone',
    '-fno-use-cxa-atexit',  # Do not call destructors for global objects
    '-g',
]

# Linker flags
target_env['LINKFLAGS'] = [
    '-ffreestanding',
    '-lgcc',
    '-nostdlib',
    '-static',
    '-pie',
    '-z', 'text',
    '-z', 'max-page-size=0x1000',
    '-g',
]

# Nasm flags
target_env['ASFLAGS'] = [
    '-Wall',
    '-f', 'elf64'
]

if build == 'release':
    # enable optimizations
    target_env['CXXFLAGS'].append('-O2')
    target_env['LINKFLAGS'].append('-O2')

# Change scons messages for better readability
target_env.Replace(
    ASCOMSTR='Assembling [$SOURCE]',
    CXXCOMSTR='Compiling [$SOURCE]',
    ARCOMSTR='Creating static library [$TARGET]',
    RANLIBCOMSTR='Updating static library [$TARGET]',
    LINKCOMSTR='Linking [$TARGET]',
    INSTALLSTR='Installing [$TARGET]'
)
Export('target_env')

######################################################################################################
#                                          App Build                                                 #
######################################################################################################

build_dir = Path('Build')

# Build the runeOS std lib
target_env.SConscript(
    str(Path('..') / '..' / 'Hammer' / 'Src' / 'SConscript'),
    variant_dir=str(build_dir / 'Hammer'),
    duplicate=0
)
Import('Hammer')

# Build system call library
target_env.SConscript(
    str(Path('..') / '..' / 'Pickaxe' / 'Src' / 'SConscript'),
    variant_dir=str(build_dir / 'Pickaxe'),
    duplicate=0
)
Import('Pickaxe')

# Build the runeOS userspace runtime
target_env.SConscript(
    str(Path('..') / '..' / 'Forge' / 'Src' / 'SConscript'),
    variant_dir=str(build_dir / 'Forge'),
    duplicate=0
)
Import('Forge')
Import('linker_script')
Import('crti')
Import('crtn')

app_name = 'mv'
target_env.SConscript(
    str(Path('Src') / 'SConscript'),
    variant_dir=str(build_dir / app_name),
    duplicate=0
)
Import(app_name)

objects = [
    crti,
    compiler / 'lib' / 'gcc' / 'x86_64-elf' / '13.2.0' / 'crtbegin.o',
    Forge,
    mv,
    Pickaxe,
    Hammer,
    compiler / 'lib' / 'gcc' / 'x86_64-elf' / '13.2.0' / 'crtend.o',
    crtn
]

target_env.Append(
    LINKFLAGS=['-T', linker_script]
)

target_env.Program(build_dir / (app_name + '.app'), objects)
