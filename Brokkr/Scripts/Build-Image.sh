#!/bin/bash

#
#  Copyright 2025 Ewogijk
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

help() {
  echo Usage "./Build-Image.sh [-h] <kernel-elf> <os-elf> <image-size>"
  echo
  echo Create the runeOS.image file with the requested \'image-size\' in the directory of the script. The image will
  echo contain two FAT32 formatted GPT partitions, the kernel partition with the bootloader and kernel elf and the data
  echo partition with the OS elf.
  echo
  echo The script requires sudo permissions!
  echo
  echo These steps are performed to create the image:
  echo "    1. Create an empty file of the requested 'image-size'."
  echo "    2. Try to setup the as block device '/dev/loop7'."
  echo "    3. Create the kernel partition at the beginning of the file."
  echo "    4. Create the data partition directly after the kernel partition."
  echo "    5. Mount both partitions at mount points in the current directory."
  echo "    6. FAT32 format both partitions."
  echo "    7. Copy the limine bootloader config and EFI application and the kernel executable to the kernel partition."
  echo "    8. Copy the os executable to the data partition."
  echo "    9. Unmount the partitions, delete the used block device and delete the temporary mount points."
  echo
  echo The GPT partitions will be created with the following properties and directory layout:
  echo
  echo --------- Kernel Partition ---------
  echo GPT Properties:
  echo "    Partition Type GUID:   EF00 (EFI System Partition)"
  echo "    Unique Partition GUID: 4d3f0533-902a-4642-b125-728c910c1f79 (rune Kernel Partition)"
  echo "    Size:                  >=64MB"
  echo "    Name:                  Kernel"
  echo Directory layout:
  echo "    runeKernel.elf:       The kernel executable."
  echo "    limine.conf:          limine bootloader configuration."
  echo "    EFI/BOOT/BOOTX64.EFI: limine bootloader EFI application."
  echo
  echo --------- Data Partition ---------
  echo GPT Properties:
  echo "    Partition Type GUID:   8fa4455d-2d55-45ba-8bca-cbcedf48bdf6 (rune Partition)"
  echo "    Unique Partition GUID: 7574b273-9503-4d83-8617-678d4c2d30c0 (rune Data Partition)"
  echo "    Size:                  >=192MB"
  echo "    Name:                  Data"
  echo Directory layout:
  echo "    /System/OS/runeOS.app: OS executable, the kernel expects it to be at this location."
  echo "    /Apps                : Contains applications that can be run as shell external commands, it needs to exist."
  echo
  echo
  echo
  echo Arguments:
  echo "    kernel-elf - The kernel executable."
  echo "    os-elf     - The OS executable."
  echo "    image-size - Size of the image in MB. Minimum size: 256MB."
  echo Options:
  echo "    -h - Print this help text"
}
while getopts "h" option; do
   case $option in
      h)
         help
         exit
   esac
done

EFI_SYSTEM_PARTITION_GUID="EF00"                                    # sgdisk alias for the EFI System Partition GUID
LOOP_DEVICE="/dev/loop7"                                            # Loop device used to mount the image
TMP_KERNEL_DIR="TmpKernelMnt"                                       # Temporary mount directory for the kernel partition
TMP_DATA_DIR="TmpDataMnt"                                           # Temporary mount directory for the data partition
RUNE_PARTITION_TYPE_GUID="8fa4455d-2d55-45ba-8bca-cbcedf48bdf6"     # Identifies a partition as being generated by the rune kernel or this bundler
KERNEL_PARTITION_UNIQUE_GUID="4d3f0533-902a-4642-b125-728c910c1f79" # Unique partition GUID of the Kernel/EFI System Partition partition
DATA_PARTITION_UNIQUE_GUID="7574b273-9503-4d83-8617-678d4c2d30c0"   # Unique partition GUID of the OS partition
OUT_FILE="runeOS.image"                                             # Output image file
OS_INSTALL_DIR="/System/OS"                                         # Directory where the OS application is installed on the OS partition.

MIN_FAT32_IMAGE_SIZE=64   #MB, Minimum FAT32 volume size
MIN_IMAGE_SIZE=256        #MB, Minimum image size -> Data partition size >=192MB

arg_count=3
if [ $# -ne $arg_count ]; then
    echo "ERROR: Insufficient number of arguments, Expected: ${arg_count}, Got: $#"
    exit 1
fi

kernel_elf=$1                     # Compiled Kernel sources
os_elf=$2                         # Compiled OS sources
image_size=$3                     # Requested image size in MB
#os_install_dir=$4                 # OS install directory on the data partition
#app_list=$5
#app_dir=$6

if [ $image_size -lt $MIN_IMAGE_SIZE ]; then
    echo "ERROR: Minimum image size is ${MIN_IMAGE_SIZE}MB, Requested: ${image_size}MB"
    exit 1
fi

echo
echo Build-Image Configuration:
echo -------------------------
echo
echo "Kernel ELF: $kernel_elf"
echo "OS ELF: $os_elf"
echo "Image Size: ${image_size}MB"
echo


# We will request mount directory ownership for the calling user
# -> Ensures that we have permissions to copy files over
uid=$(id -u)    # ID of the current user
gid=$(id -g)    # Group of the current user

set -x  # Print all shell commands
# Create disk image
touch $OUT_FILE
dd if=/dev/zero of=$OUT_FILE count="$image_size" bs=1M

# Create kernel partition
sgdisk $OUT_FILE \
        -n 0:0:${MIN_FAT32_IMAGE_SIZE}MiB \
        -t 0:$EFI_SYSTEM_PARTITION_GUID \
        -u 0:$KERNEL_PARTITION_UNIQUE_GUID \
        -A 0:set:0 \
        -c 0:Kernel

# Create data partition
sgdisk $OUT_FILE \
        -n 0:0:0 \
        -t 0:$DATA_PARTITION_UNIQUE_GUID \
        -u 0:5e3f0533-902a-4642-b125-728c910c1f79 \
        -A 0:set:0 \
        -c 0:Data

# Setup loop device
sudo losetup -P $LOOP_DEVICE $OUT_FILE
sleep .1
# FAT32 format kernel and data partition
sudo mkfs.fat -F 32 ${LOOP_DEVICE}p1
sudo mkfs.fat -F 32 ${LOOP_DEVICE}p2

# Mount kernel partition
mkdir -p $TMP_KERNEL_DIR
sudo mount -o uid="${uid}",gid="${gid}" ${LOOP_DEVICE}p1 $TMP_KERNEL_DIR

# Mount data partition
mkdir -p $TMP_DATA_DIR
sudo mount -o uid="${uid}",gid="${gid}" ${LOOP_DEVICE}p2 $TMP_DATA_DIR


# Copy kernel elf and limine files to kernel partition
mkdir -p ${TMP_KERNEL_DIR}/EFI/BOOT
cp "$kernel_elf" $TMP_KERNEL_DIR
cp Ressource/BOOTX64.EFI ${TMP_KERNEL_DIR}/EFI/BOOT
cp Ressource/limine.conf $TMP_KERNEL_DIR

# Copy OS.app to the data partition
mkdir -p ${TMP_DATA_DIR}/"$OS_INSTALL_DIR"
mkdir -p ${TMP_DATA_DIR}/Apps
cp "$os_elf" ${TMP_DATA_DIR}/"$OS_INSTALL_DIR"

## Split the app list with ',' separator: one,two -> [one, two]
#apps=$(echo $app_list | tr "," "\n")
#mkdir -p ${TMP_DATA_DIR}/$app_dir
#for a in $apps
#do
#    cp $a ${TMP_DATA_DIR}/$app_dir
#done

# Clean up
sudo umount $TMP_KERNEL_DIR
sudo umount $TMP_DATA_DIR
sudo losetup -d $LOOP_DEVICE
rm -r $TMP_KERNEL_DIR
rm -r $TMP_DATA_DIR